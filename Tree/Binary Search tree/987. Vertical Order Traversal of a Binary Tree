987. Vertical Order Traversal of a Binary Tree
Medium
Given a binary tree, return the vertical order traversal of its nodes values.

For each node at position (X, Y), its left and right children respectively will be at positions (X-1, Y-1) and (X+1, Y-1).

Running a vertical line from X = -infinity to X = +infinity, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).

If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.

Return an list of non-empty reports in order of X coordinate.  Every report will have a list of values of nodes.

 

Example 1:



Input: [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation: 
Without loss of generality, we can assume the root node is at position (0, 0):
Then, the node with value 9 occurs at position (-1, -1);
The nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);
The node with value 20 occurs at position (1, -1);
The node with value 7 occurs at position (2, -2).
Example 2:

Input: [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation: 
The node with value 5 and the node with value 6 have the same position according to the given scheme.
However, in the report "[1,5,6]", the node value of 5 comes first since 5 is smaller than 6

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    
    int minIndex=0;
    int maxIndex=0;

    void width(TreeNode* node, int level) {  // To find range of tree;
        if (node == NULL)
            return;

        minIndex = min(minIndex, level);
        maxIndex = max(maxIndex, level);

        width(node->left, level - 1);
        width(node->right, level + 1);
    }
    
    vector<vector<int>> verticalTraversal(TreeNode* node) {
        queue<TreeNode*> queN;   // Node
        queue<int> queI;     // Order

        width(node,0);
        int n=maxIndex-minIndex +1;

        queN.push(node);
        queI.push(-minIndex);    // So that min index becomes 0

        vector<vector<int>> v(n,vector<int>());  // to store all the node corresponding to the                                                          vertical order

        while(queN.size()!=0)
        {
            int size=queN.size();
            set<pair<int,int>> s;  //in order to sort the element in row
                                //[0,2,1,3,null,null,null,4,5,null,7,6,null,10,8,11,9]
                                //Expected:[[4,10,11],[3,7,6],[2,5,8,9],[0],[1]]
                                //Output  :[[4,10,11],[3,6,7],[2,5,8,9],[0],[1]]

            while(size-->0)
            {
                TreeNode *currNode = queN.front();
                int verticalOrder=queI.front();
                queN.pop();
                queI.pop();

                s.insert(make_pair(verticalOrder, currNode->val));


                // v[verticalOrder].push_back(currNode->val);  //O(1)

                if (currNode->left != NULL)
                {
                    queN.push(currNode->left);
                    queI.push(verticalOrder-1);

                }

                if (currNode->right != NULL)
                {
                    queN.push(currNode->right);
                    queI.push(verticalOrder+1);
                }
                
            }
            for(auto i:s) v[i.first].push_back(i.second);

        }
        return v;
    }
        
    
};


