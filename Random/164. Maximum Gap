164. Maximum Gap
Hard

Given an unsorted array, find the maximum difference between the successive elements in its sorted form.

Return 0 if the array contains less than 2 elements.

Example 1:

Input: [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either
             (3,6) or (6,9) has the maximum difference 3.
Example 2:

Input: [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.
Note:

You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.
Try to solve it in linear time/space.
 
 
class Solution {
public:
    
//[3,6,9,1]
//1-----3------6------9
    
// Interval =(9-1)/3
// Element-4
// bucket-3
    
// Magic=(num-min)/Interval
//     3-1/3=0
//     6-1/2=1
//     9-1/2=2
//     1-1/2=0

//1-----3 ------6 ------9    //Three Buckets 0,1,2   compare each bucket with minimum of current bucket and maximum of previous bucket
    
    // 6-3=3
    // 9-6=3
    int maximumGap(vector<int>& nums) {
        if(nums.size()<2)return 0;
        int mini = nums[0] , maxi = 0;
        int n=nums.size();
    
        for(int num : nums){
            mini = min(mini,num);
            maxi = max(maxi,num);
        }
      
        int interval = (int)ceil((maxi-mini+0.0)/(n-1));
    
        vector<int>bucketMin(n-1,INT_MAX);
        vector<int>bucketMax(n-1,-1);
      
      
        for(int i=0;i<n;i++){
            if(nums[i]==mini || nums[i]==maxi)continue;
          
            int index = (nums[i]-mini)/interval;
            bucketMin[index] = min(bucketMin[index],nums[i]);
            bucketMax[index] = max(bucketMax[index],nums[i]);
        }
        
        int prev = mini;
        int maxGap = 0;
        for(int i=0;i<bucketMin.size();i++){
            if(bucketMax[i]==-1)continue;
            maxGap = max(bucketMin[i]-prev,maxGap);
            prev = bucketMax[i];
        }
        maxGap =max(maxi-prev,maxGap);
      
        return maxGap;
    }
};

 
 
 
 
