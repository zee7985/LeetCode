220. Contains Duplicate III
Medium

Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.

 

Example 1:

Input: nums = [1,2,3,1], k = 3, t = 0
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1, t = 2
Output: true
Example 3:

Input: nums = [1,5,9,1,5,9], k = 2, t = 3
Output: false

//O(n^2)
bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
    for(int i=0;i<n;i++)
     {
        for(int j=i+1;j<n;j++)
        {
          if(abs(nums[i]-nums[j])<=t  && j-i<=k)
          {
            return true;
            }
          }
        }
     }
     return true;
  }

//O(nlogk)
class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        set<int> s ;
        for (int i = 0; i < nums.size(); i++) {
            
            // to find iterator to element just greater or equal to nums[i]
            set<int>::iterator justLarger = s.lower_bound(nums[i]);

            if (justLarger != s.end() &&  ((long long)*justLarger-(long long)nums[i])<=t) {
                return true;
            }

            // if (justSmaller != s.end() && llabs((long long)nums[i]-(long long)*justSmaller)<= t) {
            //     return true;
            // }
            
            
            //to find element just less than or equal to nums[i]
            if (justLarger !=s.begin())
            {
                auto justSmaller=--justLarger;
                if (((long long)nums[i]-(long long)*justSmaller)<=t)
                    return true;
            }

            s.insert(nums[i]);
            if (s.size() > k) {
                s.erase(nums[i - k]);
            }

            
        }
        return false;
     
     }
     
};
