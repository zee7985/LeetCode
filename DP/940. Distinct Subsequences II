940. Distinct Subsequences II
Hard

Given a string S, count the number of distinct, non-empty subsequences of S .

Since the result may be large, return the answer modulo 10^9 + 7.

 Example 1:

Input: "abc"
Output: 7
Explanation: The 7 distinct subsequences are "a", "b", "c", "ab", "ac", "bc", and "abc".
Example 2:

Input: "aba"
Output: 6
Explanation: The 6 distinct subsequences are "a", "b", "ab", "ba", "aa" and "aba".
Example 3:

Input: "aaa"
Output: 3
Explanation: The 3 distinct subsequences are "a", "aa" and "aaa".
 
Note:

S contains only lowercase letters.
1 <= S.length <= 2000

// dp[i] is the number of disctinct subsequences for substring s[0..i]. It includes the empty string "" to make things easy. We'll exclude this one in the end by simply minus 1, so the answer isdp[n-1] - 1.

// If all characters are distinct, then dp[i] = dp[i-1]*2, that is all previous subsequeuences without s[i], plus all previous subsequeuences appended with s[i].

// If there are duplicate characters, We use lastIdx[c] to denote the number of distinct subsequences ending with char c so far. So number of all previous subsequences with s[i] should be subtracted by previous lastIdx[s[i]]. That is:
// dp[i] = dp[i-1] * 2 - dp[lastIdx[s[i]]]
class Solution {
public:
    const int MOD=1e9+7;
    int distinctSubseqII(string S) {
        int n=S.length();
        S=string(1,'$') + S;      //Added this for  " "
        vector<int> dp(n+1,0);
        vector<int>lastIdx(26,-1);
        
        dp[0]=1;
        for(int i=1;i<=n;i++)
        {
            dp[i]=(2*dp[i-1])%MOD;
            if(lastIdx[S[i]-'a']!=-1)
            {
                int idx=lastIdx[S[i]-'a']-1;
                dp[i]-=(dp[idx]%MOD);
                dp[i]%=MOD;
                
            }
            lastIdx[S[i]-'a']=i;
        }
        if(dp[n]<0) dp[n]+=MOD;     //to avoid negative no., add an extra mod value in the bracket(dp[i] = (dp[i] - dp[j-1] + mod)%mod;
        return (dp[n]-1);    // Decrement 1 to exclude  " "
    }
};
