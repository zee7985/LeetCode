Print All Results In 0-1 Knapsack
1. You are given a number n, representing the count of items.
2. You are given n numbers, representing the values of n items.
3. You are given n numbers, representing the weights of n items.
3. You are given a number "cap", which is the capacity of a bag you've.
4. You are required to calculate and print the maximum value that can be created in the bag without overflowing it's capacity.
5. Also, you have to print the indices of items that should be selected to make maximum profit.
6. You have to print all such configurations.

Note -> Each item can be taken 0 or 1 number of times. You are not allowed to put the same item again and again


Sample Input
5
15 14 10 45 30
2 5 1 3 4
7
Sample Output
75    MAx profit
3 4 (index)

#include <bits/stdc++.h>
using namespace std;


class Pair {
    public:
    string psf;
    int i;
    int j;

    Pair(string psf, int i, int j) {
        this->psf = psf;
        this->i = i;
        this->j = j;
    }
};

int main()
{
    int n,amount;
    cin>>n;
    vector<int> val(n);
    for(int i=0;i<n;i++)
    {
        cin>>val[i];
    } 
    vector<int> wt(n,0);
    for(int i=0;i<n;i++)
    {
      cin>>wt[i];
        
    }
    int W;
    cin>>W;

    vector<vector<int>> dp(n+1,vector<int>(W+1,0));
  
    for (int i = 0; i <= n; i++) 
    { 
       for (int w = 0; w <= W; w++) 
       { 
           if (i==0 || w==0) 
               dp[i][w] = 0; 
           else if (wt[i-1] <= w) 
                dp[i][w] = max(val[i-1] + dp[i-1][w-wt[i-1]],  dp[i-1][w]); 
           else
                 dp[i][w] = dp[i-1][w]; 
       } 
   } 
    for (int i = 0; i <= n; i++) 
 
  
    cout<<dp[n][W]<<"\n"; 
    queue<Pair> que;
    Pair obj("",n,W);
    que.push(obj);


    while (que.size() > 0)
    {
        Pair curr = que.front();que.pop();

        if(curr.i==0 || curr.j==0)
        {
            cout<<curr.psf<<"\n";
        }
        else{
            int inc;
            if(curr.j-wt[curr.i-1]>=0)
            {
                inc=dp[curr.i -1][curr.j-wt[curr.i-1]] + val[curr.i-1]; //For eg -Dp[i][j]=75 ,then if we got our ans by inc curr ele.(for eg -30) then dp[i-1][j-arr[i]] should be 45
                                                                        //Then only add in queue
                
            }
            int exc=dp[curr.i-1][curr.j];                              // Similarly for exc ,if we got ans by exc then dp[i-1][j]= dp[i][j]

            if(dp[curr.i][curr.j]==exc)
            {
                Pair newobj(curr.psf,curr.i-1,curr.j);     
                que.push(newobj);
            }

            if(dp[curr.i][curr.j]==inc)
            {
                Pair newobj(to_string(curr.i-1) + " " + curr.psf , curr.i-1 , curr.j-wt[curr.i-1] ) ;
                que.push(newobj);
            }
        }
    }
    return 0;
}

